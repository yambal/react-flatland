{"version":3,"sources":["Provider/AssetProvider.tsx","Provider/FrameProvider.tsx","containers/Fps.tsx","containers/Portal/DefPortalContainer.tsx","containers/Flatland.tsx","containers/Sprite.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AssetContext","React","AssetProvider","props","assets","assetsLib","setAssetLib","assetLoaders","map","asset","fetch","then","response","blob","url","URL","createObjectURL","img","document","createElement","src","Promise","resolve","reject","onload","assetItem","key","width","height","all","values","console","log","Provider","value","children","FrameContext","FrameProvider","fps","frameTime","setFrameTime","requestId","setRequestId","timeStamp","setTimeStamp","frame","setFrame","step","_timeStamp","nextframe","Math","floor","requestAnimationFrame","cancelAnimationFrame","Fps","x","y","fontSize","DefPortalContainer","id","FlatLand","viewBox","_Sprite","styled","image","clipLeft","clipTop","clipWidth","clipHeight","Sprite","uuidv4","uuid","assetUrl","setAssetUrl","assetWidth","setAssetWidth","assetHeight","setAssetHeight","assetFrameMatrix","setAssetFrameMatrix","setClipLeft","setClipTop","find","asseta","matrixies","matrix","push","xlinkHref","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.290c2b9f.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\ninterface iAssetProvider {\r\n  assets?: string[]\r\n}\r\n\r\ninterface iAsset {\r\n  key: string\r\n  url: string\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const AssetContext = React.createContext<iAsset[]>([]);\r\n\r\nexport const AssetProvider: React.FC<iAssetProvider> = props => {\r\n  const { assets = [] } = props\r\n  const [assetsLib, setAssetLib] = React.useState<iAsset[]>([])\r\n\r\n  React.useEffect(\r\n    () => {\r\n      const assetLoaders = assets.map(\r\n        (asset) => {\r\n          return fetch(asset)\r\n            .then((response) => {\r\n              return response.blob();\r\n            })\r\n            .then((blob) => {\r\n              const url = URL.createObjectURL(blob)\r\n              const img = document.createElement('img')\r\n              img.src = url\r\n\r\n              return new Promise((resolve: (asset: iAsset)=>void, reject) => {\r\n                img.onload = () => {\r\n                  const assetItem: iAsset = { \r\n                    key: asset,\r\n                    url,\r\n                    width: img.width,\r\n                    height: img.height\r\n                  }\r\n                  resolve(assetItem)\r\n                }\r\n              })\r\n            })\r\n        }\r\n      )\r\n      Promise.all(assetLoaders).then((values) => {\r\n        console.log(`assets`, values)\r\n        setAssetLib(values)\r\n      });\r\n    },\r\n    []\r\n  )\r\n  \r\n  return (\r\n    <AssetContext.Provider value={assetsLib}>\r\n      {props.children}\r\n    </AssetContext.Provider>\r\n  )\r\n}","import * as React from 'react'\r\n\r\ninterface iFrameProvider {\r\n  fps?: number\r\n}\r\n\r\nexport const FrameContext = React.createContext<number>(0);\r\n\r\nexport const FrameProvider: React.FC<iFrameProvider> = props => {\r\n  const { fps = 15 } = props\r\n\r\n  const [frameTime, setFrameTime] = React.useState(1000 / fps)\r\n  const [requestId, setRequestId] = React.useState(0)\r\n  const [timeStamp, setTimeStamp] = React.useState(0)\r\n  const [frame, setFrame] = React.useState(0)\r\n\r\n  React.useEffect(\r\n    () => {\r\n      setFrameTime(1000 / fps)\r\n    },\r\n    [fps]\r\n  )\r\n\r\n  const step = React.useCallback(\r\n    (_timeStamp: number) => {\r\n      setTimeStamp(_timeStamp)\r\n      const nextframe = Math.floor(_timeStamp / frameTime)\r\n      if (frame !== nextframe) {\r\n        setFrame(nextframe)\r\n      }\r\n\r\n      setRequestId(requestAnimationFrame(step))\r\n    },\r\n    [frame, timeStamp, frameTime]\r\n  )\r\n\r\n  React.useEffect(\r\n    () => {\r\n      setFrameTime(1000 / fps)\r\n      setRequestId(requestAnimationFrame(step))\r\n      return () => {\r\n        cancelAnimationFrame(requestId)\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  return (\r\n    <FrameContext.Provider value={frame}>\r\n      {props.children}\r\n    </FrameContext.Provider>\r\n  )\r\n}","import * as React from 'react'\r\n// import { Entity } from './Entity'\r\nimport styled from 'styled-components'\r\nimport { FrameContext } from '../Provider/FrameProvider'\r\n\r\nexport const Fps: React.FC = props => {\r\n  const frame: number = React.useContext(FrameContext)\r\n\r\n  return (\r\n    <text x=\"0\" y=\"35\" fontSize=\"14\">\r\n        {frame}\r\n    </text>\r\n  )\r\n}","import * as React from 'react'\r\nexport const DEF_CONTAINER_ID = 'def-root'\r\n\r\nexport const DefPortalContainer: React.FC = () => {\r\n  return (\r\n    <defs id={DEF_CONTAINER_ID}/>\r\n  )\r\n}","import * as React from 'react'\r\nimport { AssetProvider } from '../Provider/AssetProvider'\r\nimport { FrameProvider } from '../Provider/FrameProvider'\r\nimport { Fps } from './Fps'\r\nimport { DefPortalContainer } from './Portal/DefPortalContainer'\r\n\r\nexport interface iFlatland {\r\n  width?: number\r\n  height?: number\r\n  assets?: string[]\r\n  fps?: number\r\n}\r\n\r\ninterface iAsset {\r\n  key: string\r\n  url: string\r\n}\r\n\r\nexport const FlatLand: React.FC<iFlatland> = props => {\r\n  const {\r\n    width = 480,\r\n    height = 480,\r\n    assets = [],\r\n    fps = 15\r\n  } = props\r\n\r\n  return (\r\n    <AssetProvider assets={assets}>\r\n      <FrameProvider fps={fps}>\r\n        <svg\r\n          width={width}\r\n          height={height}\r\n          viewBox={`0 0 ${width} ${height}`}\r\n        >\r\n          <DefPortalContainer />\r\n          {props.children}\r\n          <Fps />\r\n        </svg>\r\n      </FrameProvider>\r\n    </AssetProvider>\r\n  )\r\n}","import * as React from 'react'\r\n// import { Entity } from './Entity'\r\nimport styled from 'styled-components'\r\nimport { AssetContext } from '../Provider/AssetProvider'\r\n// import { FrameContext } from '../Provider/FrameProvider'\r\n// import { ClipPathPortal } from './Portal/ClipPathPortal'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ninterface iSprite{\r\n  x?: number\r\n  y?:number\r\n  width?: number\r\n  height?: number\r\n  url: string\r\n  frame?: number\r\n}\r\n\r\ninterface iSpriteImage {\r\n  clipWidth: number\r\n  clipHeight: number\r\n  clipLeft: number\r\n  clipTop: number\r\n}\r\nconst _Sprite = styled.image<iSpriteImage>`\r\n  clip-path: polygon(\r\n    ${props => props.clipLeft}px ${props => props.clipTop}px,\r\n    ${props => props.clipLeft + props.clipWidth}px ${props => props.clipTop}px,\r\n    ${props => props.clipLeft + props.clipWidth}px ${props => props.clipTop + props.clipHeight}px,\r\n    ${props => props.clipLeft}px ${props => props.clipTop + props.clipHeight}px\r\n  )\r\n`\r\n\r\ninterface iAssetFrameMatrix {\r\n  x: number\r\n  y: number\r\n}\r\n\r\ninterface iSpriteState {\r\n  uuid: string\r\n}\r\n\r\nexport const Sprite: React.FC<iSprite> = props => {\r\n  const assets = React.useContext(AssetContext)\r\n  //const _frame = React.useContext(FrameContext)\r\n\r\n  const { x = 0, y = 0, width = 32, height = 32, url, frame = 0 } = props\r\n\r\n  const [uuid, setUuid] = React.useState(uuidv4())\r\n  const [assetUrl, setAssetUrl] = React.useState('')\r\n  const [assetWidth, setAssetWidth] = React.useState(width)\r\n  const [assetHeight, setAssetHeight] = React.useState(height)\r\n  const [assetFrameMatrix, setAssetFrameMatrix] = React.useState<iAssetFrameMatrix[]>([])\r\n  const [clipLeft, setClipLeft] = React.useState<number>(0)\r\n  const [clipTop, setClipTop] = React.useState<number>(0)\r\n\r\n  React.useEffect(\r\n    () => {\r\n      const asset = assets.find(\r\n        (asseta) => {\r\n          return asseta.key === url\r\n        }\r\n      )\r\n      if (asset && assetUrl !== asset.url){\r\n        setAssetWidth(asset.width)\r\n        setAssetHeight(asset.height)\r\n        const matrixies: iAssetFrameMatrix[] = []\r\n        for (let y = 0; y < Math.floor(asset.height / height); y++) {\r\n          for (let x = 0; x < Math.floor(asset.width / width); x++) {\r\n            const matrix: iAssetFrameMatrix = {\r\n              x: x * width,\r\n              y: y * width\r\n            }\r\n            matrixies.push(matrix)\r\n          }\r\n        }\r\n        setAssetFrameMatrix(matrixies)\r\n        setAssetUrl(asset.url)\r\n      }\r\n    },\r\n    [url, assets, width, height]\r\n  )\r\n\r\n  React.useEffect(\r\n    () => {\r\n      const matrix = assetFrameMatrix[frame]\r\n      if (matrix) {\r\n        setClipLeft(assetFrameMatrix[frame].x)\r\n        setClipTop(assetFrameMatrix[frame].y)\r\n      }\r\n    },\r\n    [assetFrameMatrix, frame]\r\n  )\r\n\r\n  console.log('render')\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/*\r\n        <ClipPathPortal id={uuid} >\r\n          <rect x={x} y={y} width={width} height={height} />\r\n        </ClipPathPortal>\r\n      */}\r\n      <_Sprite\r\n        width={assetWidth}\r\n        height={assetHeight}\r\n        clipHeight={width}\r\n        clipWidth={height}\r\n        clipLeft={clipLeft}\r\n        clipTop={clipTop}\r\n        x={x-clipLeft}\r\n        y={y-clipTop}\r\n        xlinkHref={assetUrl}\r\n        onClick={()=>{console.log(uuid)}}\r\n      />\r\n    </React.Fragment>\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { FlatLand } from './containers/Flatland'\nimport { Sprite } from './containers/Sprite';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FlatLand\n        assets={['./images/64x64.png']}\n      >\n        <Sprite url={'./images/64x64.png'} x={32} y={0} frame={1}/>\n        <Sprite url={'./images/64x64.png'} x={0} y={32} frame={2}/>\n        <Sprite url={'./images/64x64.png'} x={64} y={32} frame={2}/>\n        <Sprite url={'./images/64x64.png'} x={96} y={0} frame={1}/>\n      </FlatLand>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}