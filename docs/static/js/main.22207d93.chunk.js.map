{"version":3,"sources":["containers/AssetProvider.tsx","containers/Flatland.tsx","containers/Sprite.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AssetContext","React","AssetProvider","props","assets","assetsLib","setAssetLib","assetLoaders","map","asset","fetch","then","response","blob","url","URL","createObjectURL","img","document","createElement","src","Promise","resolve","reject","onload","assetItem","key","width","height","all","values","console","log","Provider","value","children","FlatLand","viewBox","_Sprite","styled","image","clipLeft","clipTop","clipWidth","clipHeight","Sprite","x","y","frame","assetUrl","setAssetUrl","assetWidth","setAssetWidth","assetHeight","setAssetHeight","assetFrameMatrix","setAssetFrameMatrix","setClipLeft","setClipTop","find","asseta","matrixies","Math","floor","matrix","push","xlinkHref","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6NAaaA,EAAeC,gBAA8B,IAE7CC,EAA0C,SAAAC,GAAU,IAAD,EACtCA,EAAhBC,cADsD,MAC7C,GAD6C,IAE7BH,WAAyB,IAFI,mBAEvDI,EAFuD,KAE5CC,EAF4C,KAuC9D,OAnCAL,aACE,WACE,IAAMM,EAAeH,EAAOI,KAC1B,SAACC,GACC,OAAOC,MAAMD,GACVE,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACE,GACL,IAAMC,EAAMC,IAAIC,gBAAgBH,GAC1BI,EAAMC,SAASC,cAAc,OAGnC,OAFAF,EAAIG,IAAMN,EAEH,IAAIO,SAAQ,SAACC,EAAgCC,GAClDN,EAAIO,OAAS,WACX,IAAMC,EAAoB,CACxBC,IAAKjB,EACLK,MACAa,MAAOV,EAAIU,MACXC,OAAQX,EAAIW,QAEdN,EAAQG,aAMpBJ,QAAQQ,IAAItB,GAAcI,MAAK,SAACmB,GAC9BC,QAAQC,IAAIF,GACZxB,EAAYwB,QAGhB,IAIA,gBAAC9B,EAAaiC,SAAd,CAAuBC,MAAO7B,GAC3BF,EAAMgC,WC1CAC,EAAgC,SAAAjC,GAAU,IAAD,EACDA,EAA3CwB,aAD4C,MACpC,IADoC,IACDxB,EAA9ByB,cAD+B,MACtB,IADsB,IACDzB,EAAhBC,cADiB,MACR,GADQ,EAGpD,OACE,gBAAC,EAAD,CAAeA,OAAQA,GACrB,uBACEuB,MAAOA,EACPC,OAAQA,EACRS,QAAO,cAASV,EAAT,YAAkBC,IAExBzB,EAAMgC,Y,iLCJf,IAAMG,E,KAAUC,EAAOC,MAAV,KAEP,SAAArC,GAAK,OAAIA,EAAMsC,YAAc,SAAAtC,GAAK,OAAIA,EAAMuC,WAC5C,SAAAvC,GAAK,OAAIA,EAAMsC,SAAWtC,EAAMwC,aAAe,SAAAxC,GAAK,OAAIA,EAAMuC,WAC9D,SAAAvC,GAAK,OAAIA,EAAMsC,SAAWtC,EAAMwC,aAAe,SAAAxC,GAAK,OAAIA,EAAMuC,QAAUvC,EAAMyC,cAC9E,SAAAzC,GAAK,OAAIA,EAAMsC,YAAc,SAAAtC,GAAK,OAAIA,EAAMuC,QAAUvC,EAAMyC,cASrDC,EAA4B,SAAA1C,GACvC,IAAMC,EAASH,aAAiBD,GADgB,EAEkBG,EAA1D2C,SAFwC,MAEpC,EAFoC,IAEkB3C,EAAnD4C,SAFiC,MAE7B,EAF6B,IAEkB5C,EAA5CwB,aAF0B,MAElB,GAFkB,IAEkBxB,EAAhCyB,cAFc,MAEL,GAFK,EAEDd,EAAmBX,EAAnBW,IAFC,EAEkBX,EAAd6C,aAFJ,MAEY,EAFZ,IAIhB/C,WAAe,IAJC,mBAIzCgD,EAJyC,KAI/BC,EAJ+B,OAKZjD,WAAe0B,GALH,mBAKzCwB,EALyC,KAK7BC,EAL6B,OAMVnD,WAAe2B,GANL,mBAMzCyB,EANyC,KAM5BC,EAN4B,OAOArD,WAAoC,IAPpC,mBAOzCsD,EAPyC,KAOvBC,EAPuB,OAQhBvD,WAAuB,GARP,mBAQzCwC,EARyC,KAQ/BgB,EAR+B,OASlBxD,WAAuB,GATL,mBASzCyC,EATyC,KAShCgB,EATgC,KAiDhD,OAtCAzD,aACE,WACE,IAAMQ,EAAQL,EAAOuD,MACnB,SAACC,GACC,OAAOA,EAAOlC,MAAQZ,KAG1B,GAAIL,GAASwC,IAAaxC,EAAMK,IAAI,CAClCsC,EAAc3C,EAAMkB,OACpB2B,EAAe7C,EAAMmB,QAErB,IADA,IAAMiC,EAAiC,GAC9Bd,EAAI,EAAGA,EAAIe,KAAKC,MAAMtD,EAAMmB,OAASA,GAASmB,IACrD,IAAK,IAAID,EAAI,EAAGA,EAAIgB,KAAKC,MAAMtD,EAAMkB,MAAQA,GAAQmB,IAAK,CACxD,IAAMkB,EAA4B,CAChClB,EAAGA,EAAInB,EACPoB,EAAGA,EAAIpB,GAETkC,EAAUI,KAAKD,GAGnBR,EAAoBK,GACpBX,EAAYzC,EAAMK,QAGtB,CAACA,EAAKV,IAGRH,aACE,WACiBsD,EAAiBP,KAE9BS,EAAYF,EAAiBP,GAAOF,GACpCY,EAAWH,EAAiBP,GAAOD,MAGvC,CAACQ,EAAkBP,IAInB,gBAACV,EAAD,CACEX,MAAOwB,EACPvB,OAAQyB,EACRT,WAAYjB,EACZgB,UAAWf,EACXa,SAAUA,EACVC,QAASA,EACTI,EAAGA,EAAEL,EACLM,EAAGA,EAAEL,EACLwB,UAAWjB,KCzEFkB,MAff,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,CACEhE,OAAQ,CAAC,2BAET,kBAAC,EAAD,CAAQU,IAAK,yBAA0BgC,EAAG,EAAGC,EAAG,EAAGC,MAAO,IAC1D,kBAAC,EAAD,CAAQlC,IAAK,yBAA0BgC,EAAG,GAAIC,EAAG,EAAGC,MAAO,IAC3D,kBAAC,EAAD,CAAQlC,IAAK,yBAA0BgC,EAAG,EAAGC,EAAG,GAAIC,MAAO,IAC3D,kBAAC,EAAD,CAAQlC,IAAK,yBAA0BgC,EAAG,GAAIC,EAAG,GAAIC,MAAO,OCFhDqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF1D,SAAS2D,eAAe,SDkIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrE,MAAK,SAAAsE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.22207d93.chunk.js","sourcesContent":["import * as React from 'react'\r\n\r\ninterface iAssetProvider {\r\n  assets?: string[]\r\n}\r\n\r\ninterface iAsset {\r\n  key: string\r\n  url: string\r\n  width: number\r\n  height: number\r\n}\r\n\r\nexport const AssetContext = React.createContext<iAsset[]>([]);\r\n\r\nexport const AssetProvider: React.FC<iAssetProvider> = props => {\r\n  const { assets = [] } = props\r\n  const [assetsLib, setAssetLib] = React.useState<iAsset[]>([])\r\n\r\n  React.useEffect(\r\n    () => {\r\n      const assetLoaders = assets.map(\r\n        (asset) => {\r\n          return fetch(asset)\r\n            .then((response) => {\r\n              return response.blob();\r\n            })\r\n            .then((blob) => {\r\n              const url = URL.createObjectURL(blob)\r\n              const img = document.createElement('img')\r\n              img.src = url\r\n\r\n              return new Promise((resolve: (asset: iAsset)=>void, reject) => {\r\n                img.onload = () => {\r\n                  const assetItem: iAsset = { \r\n                    key: asset,\r\n                    url,\r\n                    width: img.width,\r\n                    height: img.height\r\n                  }\r\n                  resolve(assetItem)\r\n                }\r\n              })\r\n            })\r\n        }\r\n      )\r\n      Promise.all(assetLoaders).then((values) => {\r\n        console.log(values)\r\n        setAssetLib(values)\r\n      });\r\n    },\r\n    []\r\n  )\r\n  \r\n  return (\r\n    <AssetContext.Provider value={assetsLib}>\r\n      {props.children}\r\n    </AssetContext.Provider>\r\n  )\r\n}","import * as React from 'react'\r\nimport { AssetProvider } from './AssetProvider'\r\n\r\nexport interface iFlatland {\r\n  width?: number\r\n  height?: number\r\n  assets?: string[]\r\n}\r\n\r\ninterface iAsset {\r\n  key: string\r\n  url: string\r\n}\r\n\r\nexport const FlatLand: React.FC<iFlatland> = props => {\r\n  const { width = 480, height = 480, assets = [] } = props\r\n\r\n  return (\r\n    <AssetProvider assets={assets}>\r\n      <svg\r\n        width={width}\r\n        height={height}\r\n        viewBox={`0 0 ${width} ${height}`}\r\n      >\r\n        {props.children}\r\n      </svg>\r\n    </AssetProvider>\r\n  )\r\n}","import * as React from 'react'\r\n// import { Entity } from './Entity'\r\nimport styled from 'styled-components'\r\nimport { AssetContext } from './AssetProvider'\r\n\r\ninterface iSprite{\r\n  x?: number\r\n  y?:number\r\n  width?: number\r\n  height?: number\r\n  url: string\r\n  frame?: number\r\n}\r\n\r\ninterface iSpriteImage {\r\n  clipWidth: number\r\n  clipHeight: number\r\n  clipLeft: number\r\n  clipTop: number\r\n}\r\nconst _Sprite = styled.image<iSpriteImage>`\r\n  clip-path: polygon(\r\n    ${props => props.clipLeft}px ${props => props.clipTop}px,\r\n    ${props => props.clipLeft + props.clipWidth}px ${props => props.clipTop}px,\r\n    ${props => props.clipLeft + props.clipWidth}px ${props => props.clipTop + props.clipHeight}px,\r\n    ${props => props.clipLeft}px ${props => props.clipTop + props.clipHeight}px\r\n  )\r\n`\r\n\r\ninterface iAssetFrameMatrix {\r\n  x: number\r\n  y: number\r\n}\r\n\r\nexport const Sprite: React.FC<iSprite> = props => {\r\n  const assets = React.useContext(AssetContext)\r\n  const { x = 0, y = 0, width = 32, height = 32, url, frame = 0 } = props\r\n\r\n  const [assetUrl, setAssetUrl] = React.useState('')\r\n  const [assetWidth, setAssetWidth] = React.useState(width)\r\n  const [assetHeight, setAssetHeight] = React.useState(height)\r\n  const [assetFrameMatrix, setAssetFrameMatrix] = React.useState<iAssetFrameMatrix[]>([])\r\n  const [clipLeft, setClipLeft] = React.useState<number>(0)\r\n  const [clipTop, setClipTop] = React.useState<number>(0)\r\n\r\n  React.useEffect(\r\n    () => {\r\n      const asset = assets.find(\r\n        (asseta) => {\r\n          return asseta.key === url\r\n        }\r\n      )\r\n      if (asset && assetUrl !== asset.url){\r\n        setAssetWidth(asset.width)\r\n        setAssetHeight(asset.height)\r\n        const matrixies: iAssetFrameMatrix[] = []\r\n        for (let y = 0; y < Math.floor(asset.height / height); y++) {\r\n          for (let x = 0; x < Math.floor(asset.width / width); x++) {\r\n            const matrix: iAssetFrameMatrix = {\r\n              x: x * width,\r\n              y: y * width\r\n            }\r\n            matrixies.push(matrix)\r\n          }\r\n        }\r\n        setAssetFrameMatrix(matrixies)\r\n        setAssetUrl(asset.url)\r\n      }\r\n    },\r\n    [url, assets]\r\n  )\r\n\r\n  React.useEffect(\r\n    () => {\r\n      const matrix = assetFrameMatrix[frame]\r\n      if (matrix) {\r\n        setClipLeft(assetFrameMatrix[frame].x)\r\n        setClipTop(assetFrameMatrix[frame].y)\r\n      }\r\n    },\r\n    [assetFrameMatrix, frame]\r\n  )\r\n\r\n  return (\r\n    <_Sprite\r\n      width={assetWidth}\r\n      height={assetHeight}\r\n      clipHeight={width}\r\n      clipWidth={height}\r\n      clipLeft={clipLeft}\r\n      clipTop={clipTop}\r\n      x={x-clipLeft}\r\n      y={y-clipTop}\r\n      xlinkHref={assetUrl}\r\n    />\r\n  )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport { FlatLand } from './containers/Flatland'\nimport { Sprite } from './containers/Sprite';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FlatLand\n        assets={['../../images/64x64.png']}\n      >\n        <Sprite url={'../../images/64x64.png'} x={0} y={0} frame={0}/>\n        <Sprite url={'../../images/64x64.png'} x={32} y={0} frame={1}/>\n        <Sprite url={'../../images/64x64.png'} x={0} y={32} frame={2}/>\n        <Sprite url={'../../images/64x64.png'} x={32} y={32} frame={3}/>\n      </FlatLand>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}